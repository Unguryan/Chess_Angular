{"ast":null,"code":"import { BoardCell } from '../models/boardCell';\nimport { ChessUnit, UnitType } from '../models/chessUnit';\nimport { Game } from '../models/game';\nimport * as i0 from \"@angular/core\";\nexport class BoardService {\n  constructor() {}\n  CreateGame() {\n    var game = new Game();\n    game.WhiteWin = null;\n    game.WhiteMove = true;\n    game.board = this.CreateBoard();\n    return game;\n  }\n  GetUnitImage(cell) {\n    if (cell.Unit == null) {\n      return null;\n    }\n    var color = cell.Unit.Color == 0 ? \"White\" : \"Black\";\n    var type = UnitType[cell.Unit.Type];\n    return `assets/img/${color}_${type}.png`;\n  }\n  SelectCell(selectedCell, game) {\n    return null;\n    //if no game created\n    if (selectedCell == null || game == null || game.board == null) {\n      return null;\n    }\n    // //first selection\n    // if(this.selectedCell == null && selectedCell.Unit != null){\n    //   if(selectedCell.Unit.Color == 0 && this.whiteMove){\n    //     this.selectedCell = selectedCell;\n    //     selectedCell.isSelected = true;\n    //     return true;\n    //   }\n    //   if(selectedCell.Unit.Color == 1 && !this.whiteMove){\n    //     this.selectedCell = selectedCell;\n    //     selectedCell.isSelected = true;\n    //     return true;\n    //   }\n    // }\n    // // if(selectedCell.Unit == null){\n    // //   return;\n    // // }\n    // if(this.selectedCell != null && !selectedCell.isPossibleMove){\n    //   for (let i = 0; i < this.board.length; i++) {\n    //     for (let j = 0; j < this.board[i].length; j++) {\n    //       const element = this.board[i][j];\n    //       element.isPossibleMove = false;\n    //       element.isSelected = false;\n    //     }\n    //   }\n    //   if(selectedCell.Unit == null){\n    //     return false;\n    //   }\n    //   if(selectedCell.Unit.Color == 0 && this.whiteMove){\n    //     this.selectedCell = selectedCell;\n    //     selectedCell.isSelected = true;\n    //     return true;\n    //   }\n    //   if(selectedCell.Unit.Color == 1 && !this.whiteMove){\n    //     this.selectedCell = selectedCell;\n    //     selectedCell.isSelected = true;\n    //     return true;\n    //   }\n    // }\n    // if(this.selectedCell != null && selectedCell.isPossibleMove){\n    // }\n  }\n\n  CreateBoard() {\n    var counter = false;\n    return [...Array(8)].map((x, j) => {\n      return Array(8).fill(null).map((y, i) => {\n        // var x_axic = X_axic[`${String.fromCharCode(65 + i)}` as keyof typeof X_axic];\n        var x_axic = i + 1;\n        var y_axic = 8 - j;\n        // var color = counter ? 1 : 0;\n        // counter = !counter;\n        var color = (x_axic + y_axic) % 2 == 0 ? 1 : 0;\n        var unit = this.GetUnit(x_axic, y_axic);\n        return new BoardCell(color, unit, x_axic, y_axic);\n      });\n    });\n  }\n  GetUnit(x, y) {\n    //black\n    if (y == 8) {\n      if (x == 1 || x == 8) {\n        return new ChessUnit(1, UnitType.Rook);\n      }\n      if (x == 2 || x == 7) {\n        return new ChessUnit(1, UnitType.Knight);\n      }\n      if (x == 3 || x == 6) {\n        return new ChessUnit(1, UnitType.Bishop);\n      }\n      if (x == 4) {\n        return new ChessUnit(1, UnitType.Queen);\n      }\n      return new ChessUnit(1, UnitType.King);\n    }\n    //black pawn line\n    if (y == 7) {\n      return new ChessUnit(1, UnitType.Pawn);\n    }\n    //white\n    if (y == 1) {\n      if (x == 1 || x == 8) {\n        return new ChessUnit(0, UnitType.Rook);\n      }\n      if (x == 2 || x == 7) {\n        return new ChessUnit(0, UnitType.Knight);\n      }\n      if (x == 3 || x == 6) {\n        return new ChessUnit(0, UnitType.Bishop);\n      }\n      if (x == 4) {\n        return new ChessUnit(0, UnitType.Queen);\n      }\n      return new ChessUnit(0, UnitType.King);\n    }\n    //white pawn line\n    if (y == 2) {\n      return new ChessUnit(0, UnitType.Pawn);\n    }\n    return null;\n  }\n}\nBoardService.ɵfac = function BoardService_Factory(t) {\n  return new (t || BoardService)();\n};\nBoardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BoardService,\n  factory: BoardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BoardCell","ChessUnit","UnitType","Game","BoardService","constructor","CreateGame","game","WhiteWin","WhiteMove","board","CreateBoard","GetUnitImage","cell","Unit","color","Color","type","Type","SelectCell","selectedCell","counter","Array","map","x","j","fill","y","i","x_axic","y_axic","unit","GetUnit","Rook","Knight","Bishop","Queen","King","Pawn","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Asus\\source\\repos\\Chess\\Chess.Angular\\ClientApp\\src\\app\\chess\\board\\board.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BoardCell } from '../models/boardCell';\nimport { ChessUnit, UnitType } from '../models/chessUnit';\nimport { Game } from '../models/game';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoardService {\n\n  constructor() { }\n\n  CreateGame() : Game{\n    var game = new Game();\n    game.WhiteWin = null;\n    game.WhiteMove = true;\n    game.board = this.CreateBoard();\n    return game;\n  }\n\n  GetUnitImage(cell: BoardCell): string | null{\n    if(cell.Unit == null){\n      return null;\n    }\n\n    var color: string = cell.Unit.Color == 0 ? \"White\" : \"Black\"; \n    var type: string = UnitType[cell.Unit.Type]; \n\n    return `assets/img/${color}_${type}.png`;\n  }\n\n  SelectCell(selectedCell: BoardCell, game: Game) : boolean | null{\n\n    return null;\n\n    \n    //if no game created\n    if(selectedCell == null || game == null || game.board == null){\n      return null;\n    }\n\n    // //first selection\n    // if(this.selectedCell == null && selectedCell.Unit != null){\n    //   if(selectedCell.Unit.Color == 0 && this.whiteMove){\n    //     this.selectedCell = selectedCell;\n    //     selectedCell.isSelected = true;\n    //     return true;\n    //   }\n\n    //   if(selectedCell.Unit.Color == 1 && !this.whiteMove){\n    //     this.selectedCell = selectedCell;\n    //     selectedCell.isSelected = true;\n    //     return true;\n    //   }\n    // }\n    \n    // // if(selectedCell.Unit == null){\n    // //   return;\n    // // }\n\n    // if(this.selectedCell != null && !selectedCell.isPossibleMove){\n    //   for (let i = 0; i < this.board.length; i++) {\n    //     for (let j = 0; j < this.board[i].length; j++) {\n    //       const element = this.board[i][j];\n    //       element.isPossibleMove = false;\n    //       element.isSelected = false;\n    //     }\n    //   }\n\n    //   if(selectedCell.Unit == null){\n    //     return false;\n    //   }\n\n    //   if(selectedCell.Unit.Color == 0 && this.whiteMove){\n    //     this.selectedCell = selectedCell;\n    //     selectedCell.isSelected = true;\n    //     return true;\n    //   }\n\n    //   if(selectedCell.Unit.Color == 1 && !this.whiteMove){\n    //     this.selectedCell = selectedCell;\n    //     selectedCell.isSelected = true;\n    //     return true;\n    //   }\n    // }\n\n    // if(this.selectedCell != null && selectedCell.isPossibleMove){\n\n    // }\n\n    \n  }\n\n  private CreateBoard() : BoardCell[][]{\n    var counter = false;\n    return [...Array(8)].map((x, j) => {\n      return Array(8).fill(null).map((y, i) => {\n          // var x_axic = X_axic[`${String.fromCharCode(65 + i)}` as keyof typeof X_axic];\n          var x_axic = i + 1;\n          var y_axic = 8 - j;\n          // var color = counter ? 1 : 0;\n          // counter = !counter;\n\n          var color = (x_axic + y_axic) % 2 == 0 ? 1 : 0;\n          var unit = this.GetUnit(x_axic, y_axic); \n          return new BoardCell(color, unit, x_axic, y_axic);\n      });\n    });\n  }\n\n  private GetUnit(x: number, y: number) : ChessUnit | null {\n    //black\n    if(y == 8){\n      if(x == 1 || x == 8){\n        return new ChessUnit(1, UnitType.Rook);\n      }\n      if(x == 2 || x == 7){\n        return new ChessUnit(1, UnitType.Knight);\n      }\n      if(x == 3 || x == 6){\n        return new ChessUnit(1, UnitType.Bishop);\n      }\n\n      if(x == 4){\n        return new ChessUnit(1, UnitType.Queen);\n      }\n\n      return new ChessUnit(1, UnitType.King);\n    }\n\n    //black pawn line\n    if(y == 7){\n      return new ChessUnit(1, UnitType.Pawn);\n    }\n\n    //white\n    if(y == 1){\n      if(x == 1 || x == 8){\n        return new ChessUnit(0, UnitType.Rook);\n      }\n      if(x == 2 || x == 7){\n        return new ChessUnit(0, UnitType.Knight);\n      }\n      if(x == 3 || x == 6){\n        return new ChessUnit(0, UnitType.Bishop);\n      }\n\n      if(x == 4){\n        return new ChessUnit(0, UnitType.Queen);\n      }\n\n      return new ChessUnit(0, UnitType.King);\n    }\n\n    //white pawn line\n    if(y == 2){\n      return new ChessUnit(0, UnitType.Pawn);\n    }\n\n    return null;\n  }\n\n  \n\n  // GetPossibleMoves(cell: BoardCell) : BoardCell[] | null{\n  //   if(cell.Unit.)\n  // }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}