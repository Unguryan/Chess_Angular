{"ast":null,"code":"import { BoardCell } from '../models/boardCell';\nimport { ChessUnit, UnitType } from '../models/chessUnit';\nimport * as i0 from \"@angular/core\";\nexport class BoardService {\n  constructor() {}\n  CreateBoard() {\n    var counter = false;\n    return [...Array(8)].map((x, j) => {\n      return Array(8).fill(null).map((y, i) => {\n        // var x_axic = X_axic[`${String.fromCharCode(65 + i)}` as keyof typeof X_axic];\n        var x_axic = i + 1;\n        var y_axic = 8 - j;\n        var color = counter ? 1 : 0;\n        counter = !counter;\n        var unit = this.GetUnit(x_axic, y_axic);\n        return new BoardCell(color, unit, x_axic, y_axic);\n      });\n    });\n  }\n  GetUnit(x, y) {\n    //black\n    if (y == 8) {\n      if (x == 1 || x == 8) {\n        return new ChessUnit(1, UnitType.Rook);\n      }\n      if (x == 2 || 7) {\n        return new ChessUnit(1, UnitType.Knight);\n      }\n      if (x == 3 || 6) {\n        return new ChessUnit(1, UnitType.Bishop);\n      }\n      if (x = 4) {\n        return new ChessUnit(1, UnitType.Queen);\n      }\n      return new ChessUnit(1, UnitType.King);\n    }\n    //black pawn line\n    if (y == 7) {\n      return new ChessUnit(1, UnitType.Pawn);\n    }\n    //white\n    if (y == 1) {\n      if (x == 1 || 8) {\n        return new ChessUnit(0, UnitType.Rook);\n      }\n      if (x == 2 || 7) {\n        return new ChessUnit(0, UnitType.Knight);\n      }\n      if (x == 3 || 6) {\n        return new ChessUnit(0, UnitType.Bishop);\n      }\n      if (x = 4) {\n        return new ChessUnit(0, UnitType.Queen);\n      }\n      return new ChessUnit(0, UnitType.King);\n    }\n    //white pawn line\n    if (y == 2) {\n      return new ChessUnit(0, UnitType.Pawn);\n    }\n    return null;\n  }\n}\nBoardService.ɵfac = function BoardService_Factory(t) {\n  return new (t || BoardService)();\n};\nBoardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BoardService,\n  factory: BoardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BoardCell","ChessUnit","UnitType","BoardService","constructor","CreateBoard","counter","Array","map","x","j","fill","y","i","x_axic","y_axic","color","unit","GetUnit","Rook","Knight","Bishop","Queen","King","Pawn","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Asus\\source\\repos\\Chess\\Chess.Angular\\ClientApp\\src\\app\\chess\\board\\board.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BoardCell } from '../models/boardCell';\nimport { ChessUnit, UnitType } from '../models/chessUnit';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoardService {\n\n  constructor() { }\n\n\n  CreateBoard() : BoardCell[][]{\n    var counter = false;\n    return [...Array(8)].map((x, j) => {\n      return Array(8).fill(null).map((y, i) => {\n          // var x_axic = X_axic[`${String.fromCharCode(65 + i)}` as keyof typeof X_axic];\n          var x_axic = i + 1;\n          var y_axic = 8 - j;\n          var color = counter ? 1 : 0;\n          counter = !counter;\n\n          var unit = this.GetUnit(x_axic, y_axic); \n          return new BoardCell(color, unit, x_axic, y_axic);\n      });\n    });\n  }\n\n  private GetUnit(x: number, y: number) : ChessUnit | null {\n    //black\n    if(y == 8){\n      if(x == 1 || x == 8){\n        return new ChessUnit(1, UnitType.Rook);\n      }\n      if(x == 2 || 7){\n        return new ChessUnit(1, UnitType.Knight);\n      }\n      if(x == 3 || 6){\n        return new ChessUnit(1, UnitType.Bishop);\n      }\n\n      if(x = 4){\n        return new ChessUnit(1, UnitType.Queen);\n      }\n\n      return new ChessUnit(1, UnitType.King);\n    }\n\n    //black pawn line\n    if(y == 7){\n      return new ChessUnit(1, UnitType.Pawn);\n    }\n\n    //white\n    if(y == 1){\n      if(x == 1 || 8){\n        return new ChessUnit(0, UnitType.Rook);\n      }\n      if(x == 2 || 7){\n        return new ChessUnit(0, UnitType.Knight);\n      }\n      if(x == 3 || 6){\n        return new ChessUnit(0, UnitType.Bishop);\n      }\n\n      if(x = 4){\n        return new ChessUnit(0, UnitType.Queen);\n      }\n\n      return new ChessUnit(0, UnitType.King);\n    }\n\n    //white pawn line\n    if(y == 2){\n      return new ChessUnit(0, UnitType.Pawn);\n    }\n\n    return null;\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}