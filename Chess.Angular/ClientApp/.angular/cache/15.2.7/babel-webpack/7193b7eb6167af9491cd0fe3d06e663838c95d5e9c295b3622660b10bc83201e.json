{"ast":null,"code":"import { BoardCell } from '../models/boardCell';\nimport { X_axic } from '../models/cellPropeties';\nimport * as i0 from \"@angular/core\";\nexport class BoardService {\n  constructor() {}\n  CreateBoard() {\n    var counter = false;\n    return [...Array(8)].map((x, j) => {\n      return Array(8).fill(null).map((y, i) => {\n        var x_axic = X_axic[i + 1];\n        var y_axic = 8 - j;\n        var color = counter ? 1 : 0;\n        counter = !counter;\n        return new BoardCell(color, 1, 1, x_axic, y_axic);\n      });\n    });\n  }\n}\nBoardService.ɵfac = function BoardService_Factory(t) {\n  return new (t || BoardService)();\n};\nBoardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BoardService,\n  factory: BoardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAASA,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,MAAM,QAAgB,yBAAyB;;AAKxD,OAAM,MAAOC,YAAY;EAEvBC,eAAgB;EAGhBC,WAAW;IACT,IAAIC,OAAO,GAAG,KAAK;IACnB,OAAO,CAAC,GAAGC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAI;MAChC,OAAOH,KAAK,CAAC,CAAC,CAAC,CAACI,IAAI,CAAC,IAAI,CAAC,CAACH,GAAG,CAAC,CAACI,CAAC,EAAEC,CAAC,KAAI;QACpC,IAAIC,MAAM,GAAGZ,MAAM,CAACW,CAAC,GAAG,CAAC,CAAC;QAC1B,IAAIE,MAAM,GAAG,CAAC,GAAGL,CAAC;QAClB,IAAIM,KAAK,GAAGV,OAAO,GAAG,CAAC,GAAG,CAAC;QAC3BA,OAAO,GAAG,CAACA,OAAO;QAClB,OAAO,IAAIL,SAAS,CAACe,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEF,MAAM,EAAEC,MAAM,CAAC;MACrD,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;;AAhBWZ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAc,SAAZd,YAAY;EAAAe,YAFX;AAAM","names":["BoardCell","X_axic","BoardService","constructor","CreateBoard","counter","Array","map","x","j","fill","y","i","x_axic","y_axic","color","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Asus\\source\\repos\\Chess\\Chess.Angular\\ClientApp\\src\\app\\chess\\board\\board.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BoardCell } from '../models/boardCell';\nimport { X_axic, Y_axic } from '../models/cellPropeties';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoardService {\n\n  constructor() { }\n\n\n  CreateBoard() : BoardCell[][]{\n    var counter = false;\n    return [...Array(8)].map((x, j) => {\n      return Array(8).fill(null).map((y, i) => {\n          var x_axic = X_axic[i + 1];\n          var y_axic = 8 - j;\n          var color = counter ? 1 : 0;\n          counter = !counter;\n          return new BoardCell(color, 1, 1, x_axic, y_axic);\n      });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}