{"ast":null,"code":"import { X_axic } from '../models/cellPropeties';\nimport { UnitType } from '../models/chessUnit';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./board.service\";\nimport * as i2 from \"@angular/common\";\nfunction BoardComponent_div_1_ng_container_1_img_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"img\", 6);\n  }\n  if (rf & 2) {\n    const item_r3 = i0.ɵɵnextContext().$implicit;\n    const ctx_r4 = i0.ɵɵnextContext(2);\n    i0.ɵɵproperty(\"src\", ctx_r4.GetUnitImage(item_r3), i0.ɵɵsanitizeUrl);\n  }\n}\nfunction BoardComponent_div_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r7 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"div\", 4);\n    i0.ɵɵlistener(\"click\", function BoardComponent_div_1_ng_container_1_Template_div_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r7);\n      const item_r3 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r6.SelectCell(item_r3));\n    });\n    i0.ɵɵtemplate(2, BoardComponent_div_1_ng_container_1_img_2_Template, 1, 1, \"img\", 5);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"cellWhite\", item_r3.Color == 0)(\"cellBlack\", item_r3.Color == 1)(\"cellSelected\", item_r3.isSelected)(\"cellPosibleMove\", item_r3.isPossibleMove);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", item_r3.Unit != null);\n  }\n}\nfunction BoardComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵtemplate(1, BoardComponent_div_1_ng_container_1_Template, 3, 9, \"ng-container\", 3);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\nexport class BoardComponent {\n  constructor(boardService) {\n    this.boardService = boardService;\n    this.selectedCell = null;\n    this.whiteMove = true;\n  }\n  ngOnInit() {\n    this.board = this.boardService.CreateBoard();\n  }\n  TestX(x) {\n    return X_axic[x];\n  }\n  GetUnitImage(cell) {\n    if (cell.Unit == null) {\n      return null;\n    }\n    var color = cell.Unit.Color == 0 ? \"White\" : \"Black\";\n    var type = UnitType[cell.Unit.Type];\n    return `assets/img/${color}_${type}.png`;\n  }\n  SelectCell(selectedCell) {\n    if (this.selectedCell == null && selectedCell.Unit != null) {\n      if (selectedCell.Unit.Color == 0 && this.whiteMove) {\n        this.selectedCell = selectedCell;\n        selectedCell.isSelected = true;\n        return;\n      }\n      if (selectedCell.Unit.Color == 1 && !this.whiteMove) {\n        this.selectedCell = selectedCell;\n        selectedCell.isSelected = true;\n        return;\n      }\n    }\n    // if(selectedCell.Unit == null){\n    //   return;\n    // }\n    if (this.selectedCell != null && !selectedCell.isPossibleMove) {\n      for (let i = 0; i < this.board.length; i++) {\n        for (let j = 0; j < this.board[i].length; j++) {\n          const element = this.board[i][j];\n          element.isPossibleMove = false;\n          element.isSelected = false;\n        }\n      }\n      if (selectedCell.Unit == null) {\n        return;\n      }\n      if (selectedCell.Unit.Color == 0 && this.whiteMove) {\n        this.selectedCell = selectedCell;\n        selectedCell.isSelected = true;\n        return;\n      }\n      if (selectedCell.Unit.Color == 1 && !this.whiteMove) {\n        this.selectedCell = selectedCell;\n        selectedCell.isSelected = true;\n        return;\n      }\n    }\n    if (this.selectedCell != null && selectedCell.isPossibleMove) {}\n  }\n}\nBoardComponent.ɵfac = function BoardComponent_Factory(t) {\n  return new (t || BoardComponent)(i0.ɵɵdirectiveInject(i1.BoardService));\n};\nBoardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: BoardComponent,\n  selectors: [[\"app-board\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"container\"], [\"class\", \"row\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\"], [4, \"ngFor\", \"ngForOf\"], [1, \"cell\", 3, \"click\"], [3, \"src\", 4, \"ngIf\"], [3, \"src\"]],\n  template: function BoardComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, BoardComponent_div_1_Template, 2, 1, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.board);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf],\n  styles: [\".cell[_ngcontent-%COMP%] {\\r\\n    width: 78px;\\r\\n    height: 78px;\\r\\n    text-align: center;\\r\\n    position: relative;\\r\\n}\\r\\n\\r\\n.cellSelected[_ngcontent-%COMP%] {\\r\\n    background-color: chartreuse !important;\\r\\n}\\r\\n\\r\\n.cell[_ngcontent-%COMP%]   img[_ngcontent-%COMP%] {\\r\\n    width: 70px;\\r\\n    position: absolute;\\r\\n    left: 6%;\\r\\n}\\r\\n\\r\\n.cellWhite[_ngcontent-%COMP%] {\\r\\n    background-color: azure;\\r\\n}\\r\\n\\r\\n.cellBlack[_ngcontent-%COMP%] {\\r\\n    background-color: green;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hlc3MvYm9hcmQvYm9hcmQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLFdBQVc7SUFDWCxZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLHVDQUF1QztBQUMzQzs7QUFFQTtJQUNJLFdBQVc7SUFDWCxrQkFBa0I7SUFDbEIsUUFBUTtBQUNaOztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCOztBQUVBO0lBQ0ksdUJBQXVCO0FBQzNCIiwic291cmNlc0NvbnRlbnQiOlsiLmNlbGwge1xyXG4gICAgd2lkdGg6IDc4cHg7XHJcbiAgICBoZWlnaHQ6IDc4cHg7XHJcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbn1cclxuXHJcbi5jZWxsU2VsZWN0ZWQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogY2hhcnRyZXVzZSAhaW1wb3J0YW50O1xyXG59XHJcblxyXG4uY2VsbCBpbWcge1xyXG4gICAgd2lkdGg6IDcwcHg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBsZWZ0OiA2JTtcclxufVxyXG5cclxuLmNlbGxXaGl0ZSB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBhenVyZTtcclxufVxyXG5cclxuLmNlbGxCbGFjayB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBncmVlbjtcclxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AAGA,SAASA,MAAM,QAAQ,yBAAyB;AAChD,SAASC,QAAQ,QAAQ,qBAAqB;;;;;;ICO9BC,yBAA4D;;;;;IAA7BA,oEAA0B;;;;;;IATjEA,6BAAuC;IAEnCA,8BAK4B;IAA3BA;MAAA;MAAA;MAAA;MAAA,OAASA,yCAAgB;IAAA,EAAC;IAEvBA,oFAA4D;IAChEA,iBAAM;IAEVA,0BAAe;;;;IATVA,eAAmC;IAAnCA,+CAAmC;IAM1BA,eAAuB;IAAvBA,2CAAuB;;;;;IAVzCA,8BAA2C;IACvCA,uFAYe;IAEnBA,iBAAM;;;;IAd6BA,eAAM;IAANA,gCAAM;;;ADS7C,OAAM,MAAOC,cAAc;EAMzBC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;IAFhC,iBAAY,GAAqB,IAAI;IAGnC,IAAI,CAACC,SAAS,GAAG,IAAI;EACvB;EAEAC,QAAQ;IACN,IAAI,CAACC,KAAK,GAAG,IAAI,CAACH,YAAY,CAACI,WAAW,EAAE;EAC9C;EAEAC,KAAK,CAACC,CAAS;IACb,OAAOX,MAAM,CAACW,CAAC,CAAC;EAClB;EAEAC,YAAY,CAACC,IAAe;IAC1B,IAAGA,IAAI,CAACC,IAAI,IAAI,IAAI,EAAC;MACnB,OAAO,IAAI;;IAGb,IAAIC,KAAK,GAAWF,IAAI,CAACC,IAAI,CAACE,KAAK,IAAI,CAAC,GAAG,OAAO,GAAG,OAAO;IAC5D,IAAIC,IAAI,GAAWhB,QAAQ,CAACY,IAAI,CAACC,IAAI,CAACI,IAAI,CAAC;IAE3C,OAAO,cAAcH,KAAK,IAAIE,IAAI,MAAM;EAC1C;EAEAE,UAAU,CAACC,YAAuB;IAEhC,IAAG,IAAI,CAACA,YAAY,IAAI,IAAI,IAAIA,YAAY,CAACN,IAAI,IAAI,IAAI,EAAC;MACxD,IAAGM,YAAY,CAACN,IAAI,CAACE,KAAK,IAAI,CAAC,IAAI,IAAI,CAACV,SAAS,EAAC;QAChD,IAAI,CAACc,YAAY,GAAGA,YAAY;QAChCA,YAAY,CAACC,UAAU,GAAG,IAAI;QAC9B;;MAGF,IAAGD,YAAY,CAACN,IAAI,CAACE,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAACV,SAAS,EAAC;QACjD,IAAI,CAACc,YAAY,GAAGA,YAAY;QAChCA,YAAY,CAACC,UAAU,GAAG,IAAI;QAC9B;;;IAGJ;IACA;IACA;IAEA,IAAG,IAAI,CAACD,YAAY,IAAI,IAAI,IAAI,CAACA,YAAY,CAACE,cAAc,EAAC;MAC3D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACf,KAAK,CAACgB,MAAM,EAAED,CAAC,EAAE,EAAE;QAC1C,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACjB,KAAK,CAACe,CAAC,CAAC,CAACC,MAAM,EAAEC,CAAC,EAAE,EAAE;UAC7C,MAAMC,OAAO,GAAG,IAAI,CAAClB,KAAK,CAACe,CAAC,CAAC,CAACE,CAAC,CAAC;UAChCC,OAAO,CAACJ,cAAc,GAAG,KAAK;UAC9BI,OAAO,CAACL,UAAU,GAAG,KAAK;;;MAI9B,IAAGD,YAAY,CAACN,IAAI,IAAI,IAAI,EAAC;QAC3B;;MAGF,IAAGM,YAAY,CAACN,IAAI,CAACE,KAAK,IAAI,CAAC,IAAI,IAAI,CAACV,SAAS,EAAC;QAChD,IAAI,CAACc,YAAY,GAAGA,YAAY;QAChCA,YAAY,CAACC,UAAU,GAAG,IAAI;QAC9B;;MAGF,IAAGD,YAAY,CAACN,IAAI,CAACE,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAACV,SAAS,EAAC;QACjD,IAAI,CAACc,YAAY,GAAGA,YAAY;QAChCA,YAAY,CAACC,UAAU,GAAG,IAAI;QAC9B;;;IAIJ,IAAG,IAAI,CAACD,YAAY,IAAI,IAAI,IAAIA,YAAY,CAACE,cAAc,EAAC;EAK9D;;AA/EWnB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAAwB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCX3B7B,8BAAuB;MACnBA,+DAeM;MA+BVA,iBAAM;;;MA9CmBA,eAAQ;MAARA,mCAAQ","names":["X_axic","UnitType","i0","BoardComponent","constructor","boardService","whiteMove","ngOnInit","board","CreateBoard","TestX","x","GetUnitImage","cell","Unit","color","Color","type","Type","SelectCell","selectedCell","isSelected","isPossibleMove","i","length","j","element","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\Asus\\source\\repos\\Chess\\Chess.Angular\\ClientApp\\src\\app\\chess\\board\\board.component.ts","C:\\Users\\Asus\\source\\repos\\Chess\\Chess.Angular\\ClientApp\\src\\app\\chess\\board\\board.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { BoardCell } from '../models/boardCell';\nimport { BoardService } from './board.service';\nimport { X_axic } from '../models/cellPropeties';\nimport { UnitType } from '../models/chessUnit';\n\n@Component({\n  selector: 'app-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.css']\n})\nexport class BoardComponent implements OnInit {\n\n  whiteMove: boolean;\n  board : BoardCell[][];\n  selectedCell: BoardCell | null = null;\n\n  constructor(private boardService: BoardService){\n    this.whiteMove = true;\n  }\n\n  ngOnInit() {\n    this.board = this.boardService.CreateBoard();\n  }\n\n  TestX(x: number) : string{\n    return X_axic[x]\n  }\n\n  GetUnitImage(cell: BoardCell): string | null{\n    if(cell.Unit == null){\n      return null;\n    }\n\n    var color: string = cell.Unit.Color == 0 ? \"White\" : \"Black\"; \n    var type: string = UnitType[cell.Unit.Type]; \n\n    return `assets/img/${color}_${type}.png`;\n  }\n\n  SelectCell(selectedCell: BoardCell){\n\n    if(this.selectedCell == null && selectedCell.Unit != null){\n      if(selectedCell.Unit.Color == 0 && this.whiteMove){\n        this.selectedCell = selectedCell;\n        selectedCell.isSelected = true;\n        return;\n      }\n\n      if(selectedCell.Unit.Color == 1 && !this.whiteMove){\n        this.selectedCell = selectedCell;\n        selectedCell.isSelected = true;\n        return;\n      }\n    }\n    // if(selectedCell.Unit == null){\n    //   return;\n    // }\n\n    if(this.selectedCell != null && !selectedCell.isPossibleMove){\n      for (let i = 0; i < this.board.length; i++) {\n        for (let j = 0; j < this.board[i].length; j++) {\n          const element = this.board[i][j];\n          element.isPossibleMove = false;\n          element.isSelected = false;\n        }\n      }\n\n      if(selectedCell.Unit == null){\n        return;\n      }\n\n      if(selectedCell.Unit.Color == 0 && this.whiteMove){\n        this.selectedCell = selectedCell;\n        selectedCell.isSelected = true;\n        return;\n      }\n\n      if(selectedCell.Unit.Color == 1 && !this.whiteMove){\n        this.selectedCell = selectedCell;\n        selectedCell.isSelected = true;\n        return;\n      }\n    }\n\n    if(this.selectedCell != null && selectedCell.isPossibleMove){\n\n    }\n\n    \n  }\n}\n","<div class=\"container\">\n    <div *ngFor=\"let row of board\" class=\"row\">\n        <ng-container *ngFor=\"let item of row\">\n\n            <div class=\"cell\"\n             [class.cellWhite]=\"item.Color == 0\"\n             [class.cellBlack]=\"item.Color == 1\"\n             [class.cellSelected]=\"item.isSelected\"\n             [class.cellPosibleMove]=\"item.isPossibleMove\"\n             (click)=\"SelectCell(item)\">\n\n                <img *ngIf=\"item.Unit != null\" [src]=\"GetUnitImage(item)\" />\n            </div>\n\n        </ng-container>\n\n    </div>\n\n\n    <!-- <div cdkDropList #cdkBoard=cdkDropList style=\"position:relative\" \n            [cdkDropListData]=\"board\" \n            cdkDropListSortingDisabled=\"true\">\n\n            <ng-container *ngFor=\"let row of board\">\n                <ng-container *ngFor=\"let item of row\">\n                    <div \n                    class=\"cell\"\n                    [class.cellWhite]=\"item.Color == 0\" \n                    [class.cellBlack]=\"item.Color == 1\" >\n                        <img cdkDrag *ngIf=\"item.Unit != null\" [src]=\"GetUnitImage(item)\"/>\n                        <div *cdkDragPlaceholder>\n                        </div>\n                    </div>\n                </ng-container>\n               \n            </ng-container> -->\n\n    <!---this it's only to draw the board-->\n    <!-- <div class=\"row\" *ngFor=\"let row of board;let i=index\">\n        <div class=\"cell\" *ngFor=\"let box of row;let j=index\" id='columns'>\n            <button #bt mat-button class=\"bt-cell\" \n              (mouseover)=\"position=bt.getBoundingClientRect()\">\n            </button>\n        </div>\n    </div> \n</div>-->\n\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}